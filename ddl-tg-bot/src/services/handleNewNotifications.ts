import { LOCATIONS } from '@/common/index.js';
import * as services from '@/services/index.js';

import { getNewNotifications, updateNotification } from '@/db/index.js';

export async function handleNewNotifications() {
	const newNotifications = await getNewNotifications();

	if (!newNotifications.length) return;

	for await (const item of newNotifications) {
		const locValue = LOCATIONS.find((l) => l.value === item.Order.location);

		const messages = [
			`<b>‚≠ê –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞, ‚Ññ ${item.orderId}</b>\n`,
			`<b>–í–∏–¥ —É–±–æ—Ä–∫–∏:</b> ${item.Order.cl_type}`,
			`<b>–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:</b> ${item.Order.area_type}`,
			`<b>–ú–µ—Ç—Ä–∞–∂:</b> ${item.Order.area}`,
			item.Order.OrderServices.length
				? `<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b> ${item.Order.OrderServices.map((s) => s.name).join(', ')}`
				: false,
			`<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${item.Order.comment ?? '-'}\n`,
			`üìç–ì–æ—Ä–æ–¥: ${locValue?.name ?? LOCATIONS[0].name}`,
			`üí≤ ${item.Order.calc_sum} ‚ÇΩ`,
			`üë§ ${item.Order.Client.name}`,
			`‚òéÔ∏è ${item.Order.Client.phone}`,
			`üìÜ ${item.Order.createdAt.toLocaleString()}`
		]
			.filter(Boolean)
			.join('\n');

		const res = await services.sendNotification(messages);
		const log = res.success ? '' : res.msg;

		await updateNotification(item.id, res.success, log);
	}
}
